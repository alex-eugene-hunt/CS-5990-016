
Create Container:
1. Navigate to Desktop/CS-5990-016/TOGT-Planner
2. podman run -it -p 8000:8000 togt-planner

Inside Container:
1. run tests
    cd build
    ./tests

2. visualize the TOGT trajectory
    cd scripts/plots
    python3 plot_togt_traj.py

3. To visualize the TOGT-Refined trajectory
    cd scripts/togt_refine
    python3 togt_refine.py
    cd ../plots
    python3 plot_togt_refined_traj.py

4. To visualize the AOS trajectory for waypoint flight
    cd scripts/plots
    python3 plot_aos_traj.py

5. To visualize the AOS-TOGT trajectory
    cd scripts/plots
    python3 plot_aos_togt_traj.py

6. Connect via Chrome
    python3 -m http.server 8000
    http://localhost:8000/togt_traj.png

7. Kill Ports
    lsof -i :8000
    kill -9 XXXXX

Explanation:
Create Container:
1. Navigate to Desktop/CS-5990-016/TOGT-Planner:
   - This step ensures you are in the correct directory to run the container.

2. Start the Container with Port Forwarding:
   - This command starts a container named `togt-planner` and maps port 8000 on the host to port 8000 in the container, allowing you to access services running inside the container from your host machine.

Inside Container:
1. Run Tests:
   - This step navigates to the build directory and runs the test suite to ensure the TOGT-Planner is working correctly.

2. Visualize the TOGT Trajectory:
   - This script generates a visualization of the Time-Optimal Gate-Traversing (TOGT) trajectory. The graph represents the drone's optimal path through a series of gates, taking into account their shapes and sizes for the most time-efficient route.

3. Visualize the TOGT-Refined Trajectory:
   - This sequence of commands refines the initial TOGT trajectory to achieve true time optimality. The refined graph represents a more precise trajectory that considers additional constraints and optimizes the path further.

4. Visualize the AOS Trajectory for Waypoint Flight:
   - This script generates a visualization of the Automatic Optimal Synthesis (AOS) trajectory, which is designed for waypoint flights. The graph shows the optimal path considering waypoints without the detailed gate constraints.

5. Visualize the AOS-TOGT Trajectory:
   - This script combines the TOGT and AOS planners to produce a trajectory that benefits from both methods. The graph represents a highly efficient and accurate path that considers both gate constraints and waypoints.

6. Serve the Files via HTTP and Access in Browser:
   - This command starts a simple HTTP server that serves files from the current directory. You can access the visualized trajectories in your web browser by navigating to `http://localhost:8000/togt_traj.png`.

Kill Ports:
1. Find Processes Using the Port:
   - This command lists all processes that are using port 8000. It helps identify any processes that need to be terminated to free up the port.

2. Terminate the Process:
   - Replace `XXXXX` with the actual process ID (PID) obtained from the previous command. This command forcefully terminates the process using port 8000, freeing up the port for future use.

Graph Explanation:
The graphs generated by the scripts visualize the drone's optimal paths through the gates or waypoints:
- TOGT Trajectory Graph: Shows the drone's time-optimal path considering the shape and size of the gates. The path is calculated to minimize lap time while adhering to gate constraints.
  
- TOGT-Refined Trajectory Graph: Enhances the initial TOGT trajectory to achieve true time optimality by further optimizing the path and considering additional constraints.

- AOS Trajectory Graph: Illustrates the drone's path through predefined waypoints. This approach is useful for waypoint-based flights without detailed gate constraints.

- AOS-TOGT Trajectory Graph: Combines the strengths of both TOGT and AOS methods to create a highly efficient trajectory that navigates both gates and waypoints optimally.

Each graph helps to visualize and understand how different planning methods affect the drone's trajectory and overall performance in racing scenarios. These visualizations are crucial for analyzing the effectiveness of the time-optimal planners and refining them for better performance in real-world applications.
